#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void incializar(int matriz[][4]);
void mostrar(int matriz[][4]);
void inserir_num(int matriz[][4], int aleatorio);
int contar_vazios(int matriz[][4]);
int aleatorio(int vazios);


int main(void){
    system("clear");
    int matriz[4][4], jogo = 0, l , c; 
    unsigned short vazios = 0, n, i;
    char jogada = ' ';
    srand(time(NULL));

    
    printf("Deseja jogar?\n1 - sim\n2 - não\n");
    scanf("%d",&jogo);
    while(jogo > 2 || jogo < 1){
        printf("Digite apenas 1 ou 2\n");
        printf("Deseja jogar?\n1 - sim\n2 - não\n");
        scanf("%d",&jogo);
    }
    incializar(matriz);
    getchar();
    
    while(jogo == 1){
        vazios = contar_vazios(matriz);
        if(vazios > 2){
            n = (rand()%2)+1;
            for(i = 0; i < n; i++){
                inserir_num(matriz, aleatorio(vazios));
            }
        }else if(vazios == 1 || vazios == 2){
            inserir_num(matriz, aleatorio(vazios));
        }
        vazios = contar_vazios(matriz);
        mostrar(matriz);
        if(vazios == 0){
            printf("Você perdeu\n");
            return 1;
        }
        scanf("%c", &jogada);
        getchar();
        while(jogada != 'w' && jogada != 'W' && jogada != 's' && jogada != 'S' && jogada != 'd' && jogada != 'D' && jogada != 'a' && jogada != 'A'){
            printf("Apenas w a s d\n");
            scanf("%c", &jogada);
            getchar();
        }
        switch(jogada){ //fiquei confuso em relação aos argumentos das funções
            case 'W':
            case 'w':
            for(c = 0; c < TABULEIRO; c++){
            	for(l = 0; l < TABULEIRO; l++){
					if(matriz[l][c] != 0){
						int t_pos = l-1, num_pos = l, valor = matriz[l][c]; 
						while(t_pos >= 0){                                  
							if(matriz[t_pos][c] == 0){
								matriz[t_pos][c] = matriz[num_pos][c];      
								matriz[num_pos][c] = 0;
								num_pos--;
							} else if(matriz[t_pos][c] == valor) {
								matriz[t_pos][c] += matriz[num_pos][c];
								matriz[num_pos][c] = 0;                     
								num_pos = t_pos;
							}
							t_pos--;
						}
					}
				}
        	}            
            break;
            case 'A':
            case 'a':
            for(l = 0; l < TABULEIRO; l++){
            	for(c = 0; c < TABULEIRO; c++){ //checando cada coluna de cada linha
					if(matriz[l][c] != 0){
						int t_pos = c-1, num_pos = c, valor = matriz[l][c]; //variaveis temporarias para checagem da posição/valor do numero
						while(t_pos >= 0){                                  //movimentar da posição anterior até a inicial na linha
							if(matriz[l][t_pos] == 0){
								matriz[l][t_pos] = matriz[l][num_pos];      //checa se é zero e substitui
								matriz[l][num_pos] = 0;
								num_pos--;
							} else if(matriz[l][t_pos] == valor) {
								matriz[l][t_pos] += matriz[l][num_pos];
								matriz[l][num_pos] = 0;                     //checa se é igual e soma
								num_pos = t_pos;
							}
							t_pos--;
						}
					}
				}
        	}
            break;
            case 'S':
            case 's':
            for(c = 0; c < TABULEIRO-1; c++){
            	for(l = 0; l < TABULEIRO; l++){
					if(matriz[l][c] != 0){
						int t_pos = l+1, num_pos = l, valor = matriz[l][c]; 
						while(t_pos <= TABULEIRO){                                  
							if(matriz[t_pos][c] == 0){
								matriz[t_pos][c] = matriz[num_pos][c];      
								matriz[num_pos][c] = 0;
								num_pos++;
							} else if(matriz[t_pos][c] == valor) {
								matriz[t_pos][c] += matriz[num_pos][c];
								matriz[num_pos][c] = 0;                     
								num_pos = t_pos;
							}
							t_pos++;
						}
					}
				}
        	}               
            break;
            case 'D':
            case 'd':
            for(l = 0; l < TABULEIRO; l++){
            	for(c = 0; c < TABULEIRO; c++){ 
					if(matriz[l][c] != 0){
						int t_pos = c+1, num_pos = c, valor = matriz[l][c]; 
						while(t_pos <= TABULEIRO-1){                                 
							if(matriz[l][t_pos] == 0){
								matriz[l][t_pos] = matriz[l][num_pos];      
								matriz[l][num_pos] = 0;
								num_pos++;
							} else if(matriz[l][t_pos] == valor) {
								matriz[l][t_pos] += matriz[l][num_pos];
								matriz[l][num_pos] = 0;                     
								num_pos = t_pos;
							}
							t_pos++;
						}
					}
				}
        	}            
            break;
            default:
            break;
        }
        
    }
    
    
    return 0;
}

void incializar(int matriz[][4]){
    for(int l = 0; l < 4; l++){
        for(int c = 0; c < 4; c++){
            matriz[l][c] = 0;
        }
    }
}

void mostrar(int matriz[][4]){
    system("clear");
    for(int l = 0; l < 4; l++){
        for(int c = 0; c < 4; c++){
            printf("%d ",matriz[l][c]);
        }
        printf("\n");
    }
}

int contar_vazios(int matriz[][4]){
    int vazios = 0;
    for(int l = 0; l < 4; l++){
        for(int c = 0; c < 4; c++){
            if(matriz[l][c] == 0) vazios ++; 
        } 
    }
    return vazios;   
}
void inserir_num(int matriz[][4], int aleatorio){
    for(int l = 0; l < 4; l++){
        for(int c = 0; c < 4; c++){
            
            if(matriz[l][c] == 0){
                if(aleatorio == 0){
                    matriz[l][c] = 2;
                    return ;
                }else{
                    aleatorio--;
                }
            } 
        }
    }
}

int aleatorio(int vazios){    
    return rand()%vazios;
}
